/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export interface Node {
  id: Generated<number>;
  name: string;
  order: number;
  parent_id: number | null;
  project_id: number;
  type: string;
}

export interface NodeSettings {
  id: Generated<number>;
  node_id: number | null;
  settings: Json | null;
}

export interface Project {
  id: Generated<number>;
  name: string;
}

export interface ProjectUser {
  project_id: number;
  role: string;
  user_id: number;
}

export interface User {
  confirmed: Generated<boolean>;
  email: string;
  id: Generated<number>;
  last_project_id: number | null;
  name: string;
  password: string;
}

export interface Values {
  id: Generated<number>;
  list_item_id: number | null;
  node_id: number;
  parent_list_id: number | null;
  project_id: number | null;
  value: Json | null;
}

export interface DB {
  node: Node;
  node_settings: NodeSettings;
  project: Project;
  project_user: ProjectUser;
  user: User;
  values: Values;
}
