/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Account {
  accessToken: string | null;
  accessTokenExpiresAt: Timestamp | null;
  accountId: string;
  createdAt: Timestamp;
  id: string;
  idToken: string | null;
  password: string | null;
  providerId: string;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface ApiKey {
  created_at: Generated<Timestamp>;
  expires_at: Timestamp | null;
  id: Generated<number>;
  is_active: Generated<boolean>;
  key: string;
  last_used: Generated<Timestamp | null>;
  name: string;
  project_id: number;
}

export interface Node {
  depth: Generated<number | null>;
  id: Generated<number>;
  name: string;
  order: number;
  parent_id: number | null;
  project_id: number;
  type: string;
}

export interface NodeSettings {
  id: Generated<number>;
  node_id: number;
  priority: Generated<boolean | null>;
  project_id: number;
  required: Generated<boolean | null>;
  settings: Json | null;
}

export interface Project {
  id: Generated<number>;
  name: string;
}

export interface ProjectUser {
  confirmed: Generated<boolean>;
  owner: Generated<boolean>;
  project_id: number;
  roles: string[];
  user_id: number;
}

export interface Session {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  ipAddress: string | null;
  token: string;
  updatedAt: Timestamp;
  userAgent: string | null;
  userId: string;
}

export interface User {
  createdAt: Timestamp;
  email: string;
  emailVerified: boolean;
  id: string;
  image: string | null;
  last_project_id: number | null;
  name: string;
  updatedAt: Timestamp;
}

export interface Values {
  external_id: string | null;
  id: Generated<number>;
  list_path: number[] | null;
  node_id: number;
  order: Generated<number>;
  project_id: number;
  updated_at: Generated<Timestamp>;
  value: Json | null;
}

export interface Verification {
  createdAt: Timestamp | null;
  expiresAt: Timestamp;
  id: string;
  identifier: string;
  updatedAt: Timestamp | null;
  value: string;
}

export interface DB {
  account: Account;
  api_key: ApiKey;
  node: Node;
  node_settings: NodeSettings;
  project: Project;
  project_user: ProjectUser;
  session: Session;
  user: User;
  values: Values;
  verification: Verification;
}
