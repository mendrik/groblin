/* eslint-disable */
/* prettier-ignore */

export type introspection_types = {
    'Boolean': unknown;
    'Float': unknown;
    'Int': unknown;
    'Int_comparison_exp': { kind: 'INPUT_OBJECT'; name: 'Int_comparison_exp'; isOneOf: false; inputFields: [{ name: '_eq'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_gt'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_gte'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_in'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; }; }; defaultValue: null }, { name: '_is_null'; type: { kind: 'SCALAR'; name: 'Boolean'; ofType: null; }; defaultValue: null }, { name: '_lt'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_lte'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_neq'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: '_nin'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; }; }; defaultValue: null }]; };
    'String': unknown;
    'String_comparison_exp': { kind: 'INPUT_OBJECT'; name: 'String_comparison_exp'; isOneOf: false; inputFields: [{ name: '_eq'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_gt'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_gte'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_ilike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_in'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; }; }; defaultValue: null }, { name: '_iregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_is_null'; type: { kind: 'SCALAR'; name: 'Boolean'; ofType: null; }; defaultValue: null }, { name: '_like'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_lt'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_lte'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_neq'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nilike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nin'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; }; }; defaultValue: null }, { name: '_niregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nlike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nsimilar'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_regex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_similar'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'cursor_ordering': { name: 'cursor_ordering'; enumValues: 'ASC' | 'DESC'; };
    'mutation_root': { kind: 'OBJECT'; name: 'mutation_root'; fields: { 'delete_node': { name: 'delete_node'; type: { kind: 'OBJECT'; name: 'node_mutation_response'; ofType: null; } }; 'delete_node_by_pk': { name: 'delete_node_by_pk'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; 'insert_node': { name: 'insert_node'; type: { kind: 'OBJECT'; name: 'node_mutation_response'; ofType: null; } }; 'insert_node_one': { name: 'insert_node_one'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; 'update_node': { name: 'update_node'; type: { kind: 'OBJECT'; name: 'node_mutation_response'; ofType: null; } }; 'update_node_by_pk': { name: 'update_node_by_pk'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; 'update_node_many': { name: 'update_node_many'; type: { kind: 'LIST'; name: never; ofType: { kind: 'OBJECT'; name: 'node_mutation_response'; ofType: null; }; } }; }; };
    'node': { kind: 'OBJECT'; name: 'node'; fields: { 'id': { name: 'id'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; } }; 'name': { name: 'name'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; } }; 'node': { name: 'node'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'nodes': { name: 'nodes'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; 'nodes_aggregate': { name: 'nodes_aggregate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node_aggregate'; ofType: null; }; } }; 'type': { name: 'type'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; } }; }; };
    'node_aggregate': { kind: 'OBJECT'; name: 'node_aggregate'; fields: { 'aggregate': { name: 'aggregate'; type: { kind: 'OBJECT'; name: 'node_aggregate_fields'; ofType: null; } }; 'nodes': { name: 'nodes'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; }; };
    'node_aggregate_bool_exp': { kind: 'INPUT_OBJECT'; name: 'node_aggregate_bool_exp'; isOneOf: false; inputFields: [{ name: 'count'; type: { kind: 'INPUT_OBJECT'; name: 'node_aggregate_bool_exp_count'; ofType: null; }; defaultValue: null }]; };
    'node_aggregate_bool_exp_count': { kind: 'INPUT_OBJECT'; name: 'node_aggregate_bool_exp_count'; isOneOf: false; inputFields: [{ name: 'arguments'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'ENUM'; name: 'node_select_column'; ofType: null; }; }; }; defaultValue: null }, { name: 'distinct'; type: { kind: 'SCALAR'; name: 'Boolean'; ofType: null; }; defaultValue: null }, { name: 'filter'; type: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; defaultValue: null }, { name: 'predicate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'Int_comparison_exp'; ofType: null; }; }; defaultValue: null }]; };
    'node_aggregate_fields': { kind: 'OBJECT'; name: 'node_aggregate_fields'; fields: { 'avg': { name: 'avg'; type: { kind: 'OBJECT'; name: 'node_avg_fields'; ofType: null; } }; 'count': { name: 'count'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; } }; 'max': { name: 'max'; type: { kind: 'OBJECT'; name: 'node_max_fields'; ofType: null; } }; 'min': { name: 'min'; type: { kind: 'OBJECT'; name: 'node_min_fields'; ofType: null; } }; 'stddev': { name: 'stddev'; type: { kind: 'OBJECT'; name: 'node_stddev_fields'; ofType: null; } }; 'stddev_pop': { name: 'stddev_pop'; type: { kind: 'OBJECT'; name: 'node_stddev_pop_fields'; ofType: null; } }; 'stddev_samp': { name: 'stddev_samp'; type: { kind: 'OBJECT'; name: 'node_stddev_samp_fields'; ofType: null; } }; 'sum': { name: 'sum'; type: { kind: 'OBJECT'; name: 'node_sum_fields'; ofType: null; } }; 'var_pop': { name: 'var_pop'; type: { kind: 'OBJECT'; name: 'node_var_pop_fields'; ofType: null; } }; 'var_samp': { name: 'var_samp'; type: { kind: 'OBJECT'; name: 'node_var_samp_fields'; ofType: null; } }; 'variance': { name: 'variance'; type: { kind: 'OBJECT'; name: 'node_variance_fields'; ofType: null; } }; }; };
    'node_aggregate_order_by': { kind: 'INPUT_OBJECT'; name: 'node_aggregate_order_by'; isOneOf: false; inputFields: [{ name: 'avg'; type: { kind: 'INPUT_OBJECT'; name: 'node_avg_order_by'; ofType: null; }; defaultValue: null }, { name: 'count'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'max'; type: { kind: 'INPUT_OBJECT'; name: 'node_max_order_by'; ofType: null; }; defaultValue: null }, { name: 'min'; type: { kind: 'INPUT_OBJECT'; name: 'node_min_order_by'; ofType: null; }; defaultValue: null }, { name: 'stddev'; type: { kind: 'INPUT_OBJECT'; name: 'node_stddev_order_by'; ofType: null; }; defaultValue: null }, { name: 'stddev_pop'; type: { kind: 'INPUT_OBJECT'; name: 'node_stddev_pop_order_by'; ofType: null; }; defaultValue: null }, { name: 'stddev_samp'; type: { kind: 'INPUT_OBJECT'; name: 'node_stddev_samp_order_by'; ofType: null; }; defaultValue: null }, { name: 'sum'; type: { kind: 'INPUT_OBJECT'; name: 'node_sum_order_by'; ofType: null; }; defaultValue: null }, { name: 'var_pop'; type: { kind: 'INPUT_OBJECT'; name: 'node_var_pop_order_by'; ofType: null; }; defaultValue: null }, { name: 'var_samp'; type: { kind: 'INPUT_OBJECT'; name: 'node_var_samp_order_by'; ofType: null; }; defaultValue: null }, { name: 'variance'; type: { kind: 'INPUT_OBJECT'; name: 'node_variance_order_by'; ofType: null; }; defaultValue: null }]; };
    'node_arr_rel_insert_input': { kind: 'INPUT_OBJECT'; name: 'node_arr_rel_insert_input'; isOneOf: false; inputFields: [{ name: 'data'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_insert_input'; ofType: null; }; }; }; }; defaultValue: null }, { name: 'on_conflict'; type: { kind: 'INPUT_OBJECT'; name: 'node_on_conflict'; ofType: null; }; defaultValue: null }]; };
    'node_avg_fields': { kind: 'OBJECT'; name: 'node_avg_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_avg_order_by': { kind: 'INPUT_OBJECT'; name: 'node_avg_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_bool_exp': { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; isOneOf: false; inputFields: [{ name: '_and'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; }; }; defaultValue: null }, { name: '_not'; type: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; defaultValue: null }, { name: '_or'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; }; }; defaultValue: null }, { name: 'id'; type: { kind: 'INPUT_OBJECT'; name: 'Int_comparison_exp'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'INPUT_OBJECT'; name: 'String_comparison_exp'; ofType: null; }; defaultValue: null }, { name: 'node'; type: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'INPUT_OBJECT'; name: 'Int_comparison_exp'; ofType: null; }; defaultValue: null }, { name: 'nodes'; type: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; defaultValue: null }, { name: 'nodes_aggregate'; type: { kind: 'INPUT_OBJECT'; name: 'node_aggregate_bool_exp'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'INPUT_OBJECT'; name: 'String_comparison_exp'; ofType: null; }; defaultValue: null }]; };
    'node_constraint': { name: 'node_constraint'; enumValues: 'node_pkey'; };
    'node_inc_input': { kind: 'INPUT_OBJECT'; name: 'node_inc_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }]; };
    'node_insert_input': { kind: 'INPUT_OBJECT'; name: 'node_insert_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: 'node'; type: { kind: 'INPUT_OBJECT'; name: 'node_obj_rel_insert_input'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'nodes'; type: { kind: 'INPUT_OBJECT'; name: 'node_arr_rel_insert_input'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'node_max_fields': { kind: 'OBJECT'; name: 'node_max_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'name': { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'type': { name: 'type'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; }; };
    'node_max_order_by': { kind: 'INPUT_OBJECT'; name: 'node_max_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_min_fields': { kind: 'OBJECT'; name: 'node_min_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'name': { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'type': { name: 'type'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; }; };
    'node_min_order_by': { kind: 'INPUT_OBJECT'; name: 'node_min_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_mutation_response': { kind: 'OBJECT'; name: 'node_mutation_response'; fields: { 'affected_rows': { name: 'affected_rows'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; } }; 'returning': { name: 'returning'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; }; };
    'node_obj_rel_insert_input': { kind: 'INPUT_OBJECT'; name: 'node_obj_rel_insert_input'; isOneOf: false; inputFields: [{ name: 'data'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_insert_input'; ofType: null; }; }; defaultValue: null }, { name: 'on_conflict'; type: { kind: 'INPUT_OBJECT'; name: 'node_on_conflict'; ofType: null; }; defaultValue: null }]; };
    'node_on_conflict': { kind: 'INPUT_OBJECT'; name: 'node_on_conflict'; isOneOf: false; inputFields: [{ name: 'constraint'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'ENUM'; name: 'node_constraint'; ofType: null; }; }; defaultValue: null }, { name: 'update_columns'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'ENUM'; name: 'node_update_column'; ofType: null; }; }; }; }; defaultValue: "[]" }, { name: 'where'; type: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; defaultValue: null }]; };
    'node_order_by': { kind: 'INPUT_OBJECT'; name: 'node_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node'; type: { kind: 'INPUT_OBJECT'; name: 'node_order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'nodes_aggregate'; type: { kind: 'INPUT_OBJECT'; name: 'node_aggregate_order_by'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_pk_columns_input': { kind: 'INPUT_OBJECT'; name: 'node_pk_columns_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; }; defaultValue: null }]; };
    'node_select_column': { name: 'node_select_column'; enumValues: 'id' | 'name' | 'node_id' | 'type'; };
    'node_set_input': { kind: 'INPUT_OBJECT'; name: 'node_set_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'node_stddev_fields': { kind: 'OBJECT'; name: 'node_stddev_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_stddev_order_by': { kind: 'INPUT_OBJECT'; name: 'node_stddev_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_stddev_pop_fields': { kind: 'OBJECT'; name: 'node_stddev_pop_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_stddev_pop_order_by': { kind: 'INPUT_OBJECT'; name: 'node_stddev_pop_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_stddev_samp_fields': { kind: 'OBJECT'; name: 'node_stddev_samp_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_stddev_samp_order_by': { kind: 'INPUT_OBJECT'; name: 'node_stddev_samp_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_stream_cursor_input': { kind: 'INPUT_OBJECT'; name: 'node_stream_cursor_input'; isOneOf: false; inputFields: [{ name: 'initial_value'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_stream_cursor_value_input'; ofType: null; }; }; defaultValue: null }, { name: 'ordering'; type: { kind: 'ENUM'; name: 'cursor_ordering'; ofType: null; }; defaultValue: null }]; };
    'node_stream_cursor_value_input': { kind: 'INPUT_OBJECT'; name: 'node_stream_cursor_value_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; defaultValue: null }, { name: 'type'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'node_sum_fields': { kind: 'OBJECT'; name: 'node_sum_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Int'; ofType: null; } }; }; };
    'node_sum_order_by': { kind: 'INPUT_OBJECT'; name: 'node_sum_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_update_column': { name: 'node_update_column'; enumValues: 'id' | 'name' | 'node_id' | 'type'; };
    'node_updates': { kind: 'INPUT_OBJECT'; name: 'node_updates'; isOneOf: false; inputFields: [{ name: '_inc'; type: { kind: 'INPUT_OBJECT'; name: 'node_inc_input'; ofType: null; }; defaultValue: null }, { name: '_set'; type: { kind: 'INPUT_OBJECT'; name: 'node_set_input'; ofType: null; }; defaultValue: null }, { name: 'where'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'node_bool_exp'; ofType: null; }; }; defaultValue: null }]; };
    'node_var_pop_fields': { kind: 'OBJECT'; name: 'node_var_pop_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_var_pop_order_by': { kind: 'INPUT_OBJECT'; name: 'node_var_pop_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_var_samp_fields': { kind: 'OBJECT'; name: 'node_var_samp_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_var_samp_order_by': { kind: 'INPUT_OBJECT'; name: 'node_var_samp_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'node_variance_fields': { kind: 'OBJECT'; name: 'node_variance_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; 'node_id': { name: 'node_id'; type: { kind: 'SCALAR'; name: 'Float'; ofType: null; } }; }; };
    'node_variance_order_by': { kind: 'INPUT_OBJECT'; name: 'node_variance_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'node_id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'order_by': { name: 'order_by'; enumValues: 'asc' | 'asc_nulls_first' | 'asc_nulls_last' | 'desc' | 'desc_nulls_first' | 'desc_nulls_last'; };
    'query_root': { kind: 'OBJECT'; name: 'query_root'; fields: { 'node': { name: 'node'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; 'node_aggregate': { name: 'node_aggregate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node_aggregate'; ofType: null; }; } }; 'node_by_pk': { name: 'node_by_pk'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; }; };
    'subscription_root': { kind: 'OBJECT'; name: 'subscription_root'; fields: { 'node': { name: 'node'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; 'node_aggregate': { name: 'node_aggregate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node_aggregate'; ofType: null; }; } }; 'node_by_pk': { name: 'node_by_pk'; type: { kind: 'OBJECT'; name: 'node'; ofType: null; } }; 'node_stream': { name: 'node_stream'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'node'; ofType: null; }; }; }; } }; }; };
};

/** An IntrospectionQuery representation of your schema.
 *
 * @remarks
 * This is an introspection of your schema saved as a file by GraphQLSP.
 * It will automatically be used by `gql.tada` to infer the types of your GraphQL documents.
 * If you need to reuse this data or update your `scalars`, update `tadaOutputLocation` to
 * instead save to a .ts instead of a .d.ts file.
 */
export type introspection = {
  name: never;
  query: 'query_root';
  mutation: 'mutation_root';
  subscription: 'subscription_root';
  types: introspection_types;
};

import * as gqlTada from 'gql.tada';

declare module 'gql.tada' {
  interface setupSchema {
    introspection: introspection
  }
}