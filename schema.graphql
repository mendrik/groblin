type Query {
  getNodes: [Node!]!
  getTags: [Tag!]!
  getProject: ProjectData!
}

type Node {
  id: Int!
  name: String!
  order: Int!
  type: NodeType!
  parent_id: Int
  tag_id: Int!
}

enum NodeType {
  root
  object
  string
  number
  boolean
  list
  date
  schema
}

type Tag {
  id: Int!
  name: String!
  master: Boolean!
  parent_id: Int
}

type ProjectData {
  project: Project!
  user: LoggedInUser!
  nodes: [Node!]!
  tags: [Tag!]!
}

type Project {
  id: Int!
  name: String!
}

type LoggedInUser {
  id: Int!
  name: String!
  email: String!
  lastProjectId: Int!
}

type Mutation {
  register(data: Registration!): Boolean!
  login(data: Login!): Token!
  logout: Boolean!
  insertNode(data: InsertNode!): Node!
  updateNode(data: ChangeNodeInput!): Boolean!
  deleteNodeById(order: Int!, parent_id: Int!, id: Int!): Boolean!
  insertTag(data: InsertTag!): Tag!
  updateTag(data: ChangeTagInput!): Boolean!
  deleteTagById(id: Int!): Boolean!
}

input Registration {
  name: String!
  password: String!
  email: String!
}

type Token {
  token: String!
  expiresDate: DateTimeISO!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input Login {
  email: String!
  password: String!
  rememberMe: Boolean
}

input InsertNode {
  name: String!
  order: Int!
  type: NodeType!
  parent_id: Int
}

input ChangeNodeInput {
  id: Int!
  name: String!
  order: Int
  type: NodeType
  parent_id: Int
}

input InsertTag {
  name: String!
  parent_id: Int
}

input ChangeTagInput {
  id: Int!
  name: String!
  parent_id: Int
}

type Subscription {
  nodesUpdated: Boolean!
  tagsUpdated(lastProjectId: Int!): Boolean!
}