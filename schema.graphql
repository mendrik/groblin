# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApiKey {
  created_at: DateTimeISO!
  expires_at: DateTimeISO
  is_active: Boolean!
  key: String!
  last_used: DateTimeISO
  name: String!
}

input ChangeNodeInput {
  id: Int!
  name: String!
  order: Int
  parent_id: Int
  type: NodeType
}

input CreateApiKey {
  expires_at: DateTimeISO
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input GetValues {
  ids: [Int!]!
}

input InsertListItem {
  list_path: [Int!]
  name: String!
  node_id: Int!
}

input InsertNode {
  name: String!
  order: Int!
  parent_id: Int
  type: NodeType!
}

input Invite {
  email: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonArrayImportInput {
  data: String!
  external_id: String
  list_path: [Int!]
  node_id: Int!
  structure: Boolean!
}

type ListItem {
  children: [Value!]!
  id: Int!
  list_path: [Int!]
  node_id: Int!
  order: Int!
  updated_at: DateTime!
  value: JSONObject
}

input ListRequest {
  list_path: [Int!]
  node_id: Int!
}

type LoggedInUser {
  email: String!
  id: Int!
  lastProjectId: Int!
  name: String!
}

type Mutation {
  createApiKey(data: CreateApiKey!): ApiKey!
  deleteApiKey(key: String!): Boolean!
  deleteListItem(id: Int!): Boolean!
  deleteNodeById(id: Int!, order: Int!, parent_id: Int!): Boolean!
  deleteUser(id: Int!): Boolean!
  deleteValue(id: Int!): Boolean!
  importArray(data: JsonArrayImportInput!): Boolean!
  insertListItem(listItem: InsertListItem!): Int!
  insertNode(data: InsertNode!, settings: JSONObject): Node!
  inviteUser(data: Invite!): Boolean!
  toggleApiKey(key: String!): Boolean!
  truncate(data: TruncateValue!): Boolean!
  updateNode(data: ChangeNodeInput!): Boolean!
  uploadUrl(filename: String!): Upload!
  upsertNodeSettings(data: UpsertNodeSettings!): Int!
  upsertValue(data: UpsertValue!): Int!
}

type Node {
  depth: Int!
  id: Int!
  name: String!
  order: Int!
  parent_id: Int
  type: NodeType!
}

type NodeSettings {
  id: Int!
  node_id: Int!
  settings: JSONObject!
}

enum NodeType {
  article
  boolean
  choice
  color
  date
  list
  media
  number
  object
  root
  string
}

type Project {
  id: Int!
  name: String!
}

type ProjectData {
  nodeSettings: [NodeSettings!]!
  nodes: [Node!]!
  project: Project!
  user: LoggedInUser!
  values: [Value!]!
}

type ProjectUser {
  confirmed: Boolean!
  email: String!
  id: Int!
  name: String!
  owner: Boolean!
  roles: [String!]!
}

type Query {
  getApiKeys: [ApiKey!]!
  getListColumns(node_id: Int!): [Node!]!
  getListItems(request: ListRequest!): [ListItem!]!
  getNodeSettings: [NodeSettings!]!
  getNodes: [Node!]!
  getProject: ProjectData!
  getUsers: [ProjectUser!]!
  getValues(data: GetValues!): [Value!]!
}

type Subscription {
  apiKeysUpdated: Boolean!
  nodeSettingsUpdated: Boolean!
  nodesUpdated: Boolean!
  usersUpdated: Boolean!
  valuesUpdated: Value!
}

input TruncateValue {
  node_id: Int!
}

type Upload {
  object: String!
  signedUrl: String!
}

input UpsertNodeSettings {
  id: Int
  node_id: Int!
  settings: JSONObject!
}

input UpsertValue {
  id: Int
  list_path: [Int!]
  node_id: Int!
  value: JSONObject!
}

type Value {
  id: Int!
  list_path: [Int!]
  node_id: Int!
  order: Int!
  updated_at: DateTime!
  value: JSONObject
}