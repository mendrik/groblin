schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "node"
  """
  delete_node(
    """filter the rows which have to be deleted"""
    where: node_bool_exp!
  ): node_mutation_response

  """
  delete single row from the table: "node"
  """
  delete_node_by_pk(id: bigint!): node

  """
  delete data from the table: "project"
  """
  delete_project(
    """filter the rows which have to be deleted"""
    where: project_bool_exp!
  ): project_mutation_response

  """
  delete single row from the table: "project"
  """
  delete_project_by_pk(id: bigint!): project

  """
  delete data from the table: "project_user"
  """
  delete_project_user(
    """filter the rows which have to be deleted"""
    where: project_user_bool_exp!
  ): project_user_mutation_response

  """
  delete single row from the table: "project_user"
  """
  delete_project_user_by_pk(project_id: bigint!, user_id: bigint!): project_user

  """
  delete data from the table: "tag"
  """
  delete_tag(
    """filter the rows which have to be deleted"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  delete single row from the table: "tag"
  """
  delete_tag_by_pk(id: bigint!): tag

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  insert data into the table: "node"
  """
  insert_node(
    """the rows to be inserted"""
    objects: [node_insert_input!]!

    """upsert condition"""
    on_conflict: node_on_conflict
  ): node_mutation_response

  """
  insert a single row into the table: "node"
  """
  insert_node_one(
    """the row to be inserted"""
    object: node_insert_input!

    """upsert condition"""
    on_conflict: node_on_conflict
  ): node

  """
  insert data into the table: "project"
  """
  insert_project(
    """the rows to be inserted"""
    objects: [project_insert_input!]!

    """upsert condition"""
    on_conflict: project_on_conflict
  ): project_mutation_response

  """
  insert a single row into the table: "project"
  """
  insert_project_one(
    """the row to be inserted"""
    object: project_insert_input!

    """upsert condition"""
    on_conflict: project_on_conflict
  ): project

  """
  insert data into the table: "project_user"
  """
  insert_project_user(
    """the rows to be inserted"""
    objects: [project_user_insert_input!]!

    """upsert condition"""
    on_conflict: project_user_on_conflict
  ): project_user_mutation_response

  """
  insert a single row into the table: "project_user"
  """
  insert_project_user_one(
    """the row to be inserted"""
    object: project_user_insert_input!

    """upsert condition"""
    on_conflict: project_user_on_conflict
  ): project_user

  """
  insert data into the table: "tag"
  """
  insert_tag(
    """the rows to be inserted"""
    objects: [tag_insert_input!]!

    """upsert condition"""
    on_conflict: tag_on_conflict
  ): tag_mutation_response

  """
  insert a single row into the table: "tag"
  """
  insert_tag_one(
    """the row to be inserted"""
    object: tag_insert_input!

    """upsert condition"""
    on_conflict: tag_on_conflict
  ): tag

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "node"
  """
  update_node(
    """increments the numeric columns with given value of the filtered values"""
    _inc: node_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: node_set_input

    """filter the rows which have to be updated"""
    where: node_bool_exp!
  ): node_mutation_response

  """
  update single row of the table: "node"
  """
  update_node_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: node_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: node_set_input
    pk_columns: node_pk_columns_input!
  ): node

  """
  update multiples rows of table: "node"
  """
  update_node_many(
    """updates to execute, in order"""
    updates: [node_updates!]!
  ): [node_mutation_response]

  """
  update data of the table: "project"
  """
  update_project(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_set_input

    """filter the rows which have to be updated"""
    where: project_bool_exp!
  ): project_mutation_response

  """
  update single row of the table: "project"
  """
  update_project_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_set_input
    pk_columns: project_pk_columns_input!
  ): project

  """
  update multiples rows of table: "project"
  """
  update_project_many(
    """updates to execute, in order"""
    updates: [project_updates!]!
  ): [project_mutation_response]

  """
  update data of the table: "project_user"
  """
  update_project_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_user_set_input

    """filter the rows which have to be updated"""
    where: project_user_bool_exp!
  ): project_user_mutation_response

  """
  update single row of the table: "project_user"
  """
  update_project_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_user_set_input
    pk_columns: project_user_pk_columns_input!
  ): project_user

  """
  update multiples rows of table: "project_user"
  """
  update_project_user_many(
    """updates to execute, in order"""
    updates: [project_user_updates!]!
  ): [project_user_mutation_response]

  """
  update data of the table: "tag"
  """
  update_tag(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input

    """filter the rows which have to be updated"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  update single row of the table: "tag"
  """
  update_tag_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input
    pk_columns: tag_pk_columns_input!
  ): tag

  """
  update multiples rows of table: "tag"
  """
  update_tag_many(
    """updates to execute, in order"""
    updates: [tag_updates!]!
  ): [tag_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""
columns and relationships of "node"
"""
type node {
  id: bigint!
  name: String!

  """An object relationship"""
  node: node
  node_id: bigint

  """An array relationship"""
  nodes(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): [node!]!

  """An aggregate relationship"""
  nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): node_aggregate!
  order: Int!
  type: String!
}

"""
aggregated selection of "node"
"""
type node_aggregate {
  aggregate: node_aggregate_fields
  nodes: [node!]!
}

input node_aggregate_bool_exp {
  count: node_aggregate_bool_exp_count
}

input node_aggregate_bool_exp_count {
  arguments: [node_select_column!]
  distinct: Boolean
  filter: node_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "node"
"""
type node_aggregate_fields {
  avg: node_avg_fields
  count(columns: [node_select_column!], distinct: Boolean): Int!
  max: node_max_fields
  min: node_min_fields
  stddev: node_stddev_fields
  stddev_pop: node_stddev_pop_fields
  stddev_samp: node_stddev_samp_fields
  sum: node_sum_fields
  var_pop: node_var_pop_fields
  var_samp: node_var_samp_fields
  variance: node_variance_fields
}

"""
order by aggregate values of table "node"
"""
input node_aggregate_order_by {
  avg: node_avg_order_by
  count: order_by
  max: node_max_order_by
  min: node_min_order_by
  stddev: node_stddev_order_by
  stddev_pop: node_stddev_pop_order_by
  stddev_samp: node_stddev_samp_order_by
  sum: node_sum_order_by
  var_pop: node_var_pop_order_by
  var_samp: node_var_samp_order_by
  variance: node_variance_order_by
}

"""
input type for inserting array relation for remote table "node"
"""
input node_arr_rel_insert_input {
  data: [node_insert_input!]!

  """upsert condition"""
  on_conflict: node_on_conflict
}

"""aggregate avg on columns"""
type node_avg_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by avg() on columns of table "node"
"""
input node_avg_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""
Boolean expression to filter rows from the table "node". All fields are combined with a logical 'AND'.
"""
input node_bool_exp {
  _and: [node_bool_exp!]
  _not: node_bool_exp
  _or: [node_bool_exp!]
  id: bigint_comparison_exp
  name: String_comparison_exp
  node: node_bool_exp
  node_id: bigint_comparison_exp
  nodes: node_bool_exp
  nodes_aggregate: node_aggregate_bool_exp
  order: Int_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "node"
"""
enum node_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  node_pkey
}

"""
input type for incrementing numeric columns in table "node"
"""
input node_inc_input {
  id: bigint
  node_id: bigint
  order: Int
}

"""
input type for inserting data into table "node"
"""
input node_insert_input {
  id: bigint
  name: String
  node: node_obj_rel_insert_input
  node_id: bigint
  nodes: node_arr_rel_insert_input
  order: Int
  type: String
}

"""aggregate max on columns"""
type node_max_fields {
  id: bigint
  name: String
  node_id: bigint
  order: Int
  type: String
}

"""
order by max() on columns of table "node"
"""
input node_max_order_by {
  id: order_by
  name: order_by
  node_id: order_by
  order: order_by
  type: order_by
}

"""aggregate min on columns"""
type node_min_fields {
  id: bigint
  name: String
  node_id: bigint
  order: Int
  type: String
}

"""
order by min() on columns of table "node"
"""
input node_min_order_by {
  id: order_by
  name: order_by
  node_id: order_by
  order: order_by
  type: order_by
}

"""
response of any mutation on the table "node"
"""
type node_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [node!]!
}

"""
input type for inserting object relation for remote table "node"
"""
input node_obj_rel_insert_input {
  data: node_insert_input!

  """upsert condition"""
  on_conflict: node_on_conflict
}

"""
on_conflict condition type for table "node"
"""
input node_on_conflict {
  constraint: node_constraint!
  update_columns: [node_update_column!]! = []
  where: node_bool_exp
}

"""Ordering options when selecting data from "node"."""
input node_order_by {
  id: order_by
  name: order_by
  node: node_order_by
  node_id: order_by
  nodes_aggregate: node_aggregate_order_by
  order: order_by
  type: order_by
}

"""primary key columns input for table: node"""
input node_pk_columns_input {
  id: bigint!
}

"""
select columns of table "node"
"""
enum node_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  node_id

  """column name"""
  order

  """column name"""
  type
}

"""
input type for updating data in table "node"
"""
input node_set_input {
  id: bigint
  name: String
  node_id: bigint
  order: Int
  type: String
}

"""aggregate stddev on columns"""
type node_stddev_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by stddev() on columns of table "node"
"""
input node_stddev_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""aggregate stddev_pop on columns"""
type node_stddev_pop_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by stddev_pop() on columns of table "node"
"""
input node_stddev_pop_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""aggregate stddev_samp on columns"""
type node_stddev_samp_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by stddev_samp() on columns of table "node"
"""
input node_stddev_samp_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""
Streaming cursor of the table "node"
"""
input node_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: node_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input node_stream_cursor_value_input {
  id: bigint
  name: String
  node_id: bigint
  order: Int
  type: String
}

"""aggregate sum on columns"""
type node_sum_fields {
  id: bigint
  node_id: bigint
  order: Int
}

"""
order by sum() on columns of table "node"
"""
input node_sum_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""
update columns of table "node"
"""
enum node_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  node_id

  """column name"""
  order

  """column name"""
  type
}

input node_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: node_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: node_set_input

  """filter the rows which have to be updated"""
  where: node_bool_exp!
}

"""aggregate var_pop on columns"""
type node_var_pop_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by var_pop() on columns of table "node"
"""
input node_var_pop_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""aggregate var_samp on columns"""
type node_var_samp_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by var_samp() on columns of table "node"
"""
input node_var_samp_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""aggregate variance on columns"""
type node_variance_fields {
  id: Float
  node_id: Float
  order: Float
}

"""
order by variance() on columns of table "node"
"""
input node_variance_order_by {
  id: order_by
  node_id: order_by
  order: order_by
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "project"
"""
type project {
  id: bigint!
  name: String!

  """An array relationship"""
  project_users(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): [project_user!]!

  """An aggregate relationship"""
  project_users_aggregate(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): project_user_aggregate!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """An aggregate relationship"""
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!
}

"""
aggregated selection of "project"
"""
type project_aggregate {
  aggregate: project_aggregate_fields
  nodes: [project!]!
}

"""
aggregate fields of "project"
"""
type project_aggregate_fields {
  avg: project_avg_fields
  count(columns: [project_select_column!], distinct: Boolean): Int!
  max: project_max_fields
  min: project_min_fields
  stddev: project_stddev_fields
  stddev_pop: project_stddev_pop_fields
  stddev_samp: project_stddev_samp_fields
  sum: project_sum_fields
  var_pop: project_var_pop_fields
  var_samp: project_var_samp_fields
  variance: project_variance_fields
}

"""aggregate avg on columns"""
type project_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'.
"""
input project_bool_exp {
  _and: [project_bool_exp!]
  _not: project_bool_exp
  _or: [project_bool_exp!]
  id: bigint_comparison_exp
  name: String_comparison_exp
  project_users: project_user_bool_exp
  project_users_aggregate: project_user_aggregate_bool_exp
  tags: tag_bool_exp
  tags_aggregate: tag_aggregate_bool_exp
}

"""
unique or primary key constraints on table "project"
"""
enum project_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  project_pkey
}

"""
input type for incrementing numeric columns in table "project"
"""
input project_inc_input {
  id: bigint
}

"""
input type for inserting data into table "project"
"""
input project_insert_input {
  id: bigint
  name: String
  project_users: project_user_arr_rel_insert_input
  tags: tag_arr_rel_insert_input
}

"""aggregate max on columns"""
type project_max_fields {
  id: bigint
  name: String
}

"""aggregate min on columns"""
type project_min_fields {
  id: bigint
  name: String
}

"""
response of any mutation on the table "project"
"""
type project_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project!]!
}

"""
input type for inserting object relation for remote table "project"
"""
input project_obj_rel_insert_input {
  data: project_insert_input!

  """upsert condition"""
  on_conflict: project_on_conflict
}

"""
on_conflict condition type for table "project"
"""
input project_on_conflict {
  constraint: project_constraint!
  update_columns: [project_update_column!]! = []
  where: project_bool_exp
}

"""Ordering options when selecting data from "project"."""
input project_order_by {
  id: order_by
  name: order_by
  project_users_aggregate: project_user_aggregate_order_by
  tags_aggregate: tag_aggregate_order_by
}

"""primary key columns input for table: project"""
input project_pk_columns_input {
  id: bigint!
}

"""
select columns of table "project"
"""
enum project_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "project"
"""
input project_set_input {
  id: bigint
  name: String
}

"""aggregate stddev on columns"""
type project_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type project_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type project_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "project"
"""
input project_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: project_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input project_stream_cursor_value_input {
  id: bigint
  name: String
}

"""aggregate sum on columns"""
type project_sum_fields {
  id: bigint
}

"""
update columns of table "project"
"""
enum project_update_column {
  """column name"""
  id

  """column name"""
  name
}

input project_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: project_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: project_set_input

  """filter the rows which have to be updated"""
  where: project_bool_exp!
}

"""
columns and relationships of "project_user"
"""
type project_user {
  """An object relationship"""
  project: project!
  project_id: bigint!
  role: String!

  """An object relationship"""
  user: user!
  user_id: bigint!
}

"""
aggregated selection of "project_user"
"""
type project_user_aggregate {
  aggregate: project_user_aggregate_fields
  nodes: [project_user!]!
}

input project_user_aggregate_bool_exp {
  count: project_user_aggregate_bool_exp_count
}

input project_user_aggregate_bool_exp_count {
  arguments: [project_user_select_column!]
  distinct: Boolean
  filter: project_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "project_user"
"""
type project_user_aggregate_fields {
  avg: project_user_avg_fields
  count(columns: [project_user_select_column!], distinct: Boolean): Int!
  max: project_user_max_fields
  min: project_user_min_fields
  stddev: project_user_stddev_fields
  stddev_pop: project_user_stddev_pop_fields
  stddev_samp: project_user_stddev_samp_fields
  sum: project_user_sum_fields
  var_pop: project_user_var_pop_fields
  var_samp: project_user_var_samp_fields
  variance: project_user_variance_fields
}

"""
order by aggregate values of table "project_user"
"""
input project_user_aggregate_order_by {
  avg: project_user_avg_order_by
  count: order_by
  max: project_user_max_order_by
  min: project_user_min_order_by
  stddev: project_user_stddev_order_by
  stddev_pop: project_user_stddev_pop_order_by
  stddev_samp: project_user_stddev_samp_order_by
  sum: project_user_sum_order_by
  var_pop: project_user_var_pop_order_by
  var_samp: project_user_var_samp_order_by
  variance: project_user_variance_order_by
}

"""
input type for inserting array relation for remote table "project_user"
"""
input project_user_arr_rel_insert_input {
  data: [project_user_insert_input!]!

  """upsert condition"""
  on_conflict: project_user_on_conflict
}

"""aggregate avg on columns"""
type project_user_avg_fields {
  project_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "project_user"
"""
input project_user_avg_order_by {
  project_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "project_user". All fields are combined with a logical 'AND'.
"""
input project_user_bool_exp {
  _and: [project_user_bool_exp!]
  _not: project_user_bool_exp
  _or: [project_user_bool_exp!]
  project: project_bool_exp
  project_id: bigint_comparison_exp
  role: String_comparison_exp
  user: user_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "project_user"
"""
enum project_user_constraint {
  """
  unique or primary key constraint on columns "project_id", "user_id"
  """
  project_user_pkey
}

"""
input type for incrementing numeric columns in table "project_user"
"""
input project_user_inc_input {
  project_id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "project_user"
"""
input project_user_insert_input {
  project: project_obj_rel_insert_input
  project_id: bigint
  role: String
  user: user_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type project_user_max_fields {
  project_id: bigint
  role: String
  user_id: bigint
}

"""
order by max() on columns of table "project_user"
"""
input project_user_max_order_by {
  project_id: order_by
  role: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type project_user_min_fields {
  project_id: bigint
  role: String
  user_id: bigint
}

"""
order by min() on columns of table "project_user"
"""
input project_user_min_order_by {
  project_id: order_by
  role: order_by
  user_id: order_by
}

"""
response of any mutation on the table "project_user"
"""
type project_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_user!]!
}

"""
on_conflict condition type for table "project_user"
"""
input project_user_on_conflict {
  constraint: project_user_constraint!
  update_columns: [project_user_update_column!]! = []
  where: project_user_bool_exp
}

"""Ordering options when selecting data from "project_user"."""
input project_user_order_by {
  project: project_order_by
  project_id: order_by
  role: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: project_user"""
input project_user_pk_columns_input {
  project_id: bigint!
  user_id: bigint!
}

"""
select columns of table "project_user"
"""
enum project_user_select_column {
  """column name"""
  project_id

  """column name"""
  role

  """column name"""
  user_id
}

"""
input type for updating data in table "project_user"
"""
input project_user_set_input {
  project_id: bigint
  role: String
  user_id: bigint
}

"""aggregate stddev on columns"""
type project_user_stddev_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "project_user"
"""
input project_user_stddev_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type project_user_stddev_pop_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "project_user"
"""
input project_user_stddev_pop_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type project_user_stddev_samp_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "project_user"
"""
input project_user_stddev_samp_order_by {
  project_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "project_user"
"""
input project_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: project_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input project_user_stream_cursor_value_input {
  project_id: bigint
  role: String
  user_id: bigint
}

"""aggregate sum on columns"""
type project_user_sum_fields {
  project_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "project_user"
"""
input project_user_sum_order_by {
  project_id: order_by
  user_id: order_by
}

"""
update columns of table "project_user"
"""
enum project_user_update_column {
  """column name"""
  project_id

  """column name"""
  role

  """column name"""
  user_id
}

input project_user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: project_user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: project_user_set_input

  """filter the rows which have to be updated"""
  where: project_user_bool_exp!
}

"""aggregate var_pop on columns"""
type project_user_var_pop_fields {
  project_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "project_user"
"""
input project_user_var_pop_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type project_user_var_samp_fields {
  project_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "project_user"
"""
input project_user_var_samp_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type project_user_variance_fields {
  project_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "project_user"
"""
input project_user_variance_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type project_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type project_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type project_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "node"
  """
  node(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): [node!]!

  """
  fetch aggregated fields from the table: "node"
  """
  node_aggregate(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): node_aggregate!

  """fetch data from the table: "node" using primary key columns"""
  node_by_pk(id: bigint!): node

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  project_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """fetch data from the table: "project" using primary key columns"""
  project_by_pk(id: bigint!): project

  """
  fetch data from the table: "project_user"
  """
  project_user(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): [project_user!]!

  """
  fetch aggregated fields from the table: "project_user"
  """
  project_user_aggregate(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): project_user_aggregate!

  """fetch data from the table: "project_user" using primary key columns"""
  project_user_by_pk(project_id: bigint!, user_id: bigint!): project_user

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: bigint!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!
}

type subscription_root {
  """
  fetch data from the table: "node"
  """
  node(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): [node!]!

  """
  fetch aggregated fields from the table: "node"
  """
  node_aggregate(
    """distinct select on columns"""
    distinct_on: [node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [node_order_by!]

    """filter the rows returned"""
    where: node_bool_exp
  ): node_aggregate!

  """fetch data from the table: "node" using primary key columns"""
  node_by_pk(id: bigint!): node

  """
  fetch data from the table in a streaming manner: "node"
  """
  node_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [node_stream_cursor_input]!

    """filter the rows returned"""
    where: node_bool_exp
  ): [node!]!

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  project_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """fetch data from the table: "project" using primary key columns"""
  project_by_pk(id: bigint!): project

  """
  fetch data from the table in a streaming manner: "project"
  """
  project_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [project_stream_cursor_input]!

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """
  fetch data from the table: "project_user"
  """
  project_user(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): [project_user!]!

  """
  fetch aggregated fields from the table: "project_user"
  """
  project_user_aggregate(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): project_user_aggregate!

  """fetch data from the table: "project_user" using primary key columns"""
  project_user_by_pk(project_id: bigint!, user_id: bigint!): project_user

  """
  fetch data from the table in a streaming manner: "project_user"
  """
  project_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [project_user_stream_cursor_input]!

    """filter the rows returned"""
    where: project_user_bool_exp
  ): [project_user!]!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: bigint!): tag

  """
  fetch data from the table in a streaming manner: "tag"
  """
  tag_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tag_stream_cursor_input]!

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

"""
columns and relationships of "tag"
"""
type tag {
  id: bigint!
  name: String!
  parent_tag: bigint

  """An object relationship"""
  project: project!
  project_id: bigint!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """An aggregate relationship"""
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!
}

"""
aggregated selection of "tag"
"""
type tag_aggregate {
  aggregate: tag_aggregate_fields
  nodes: [tag!]!
}

input tag_aggregate_bool_exp {
  count: tag_aggregate_bool_exp_count
}

input tag_aggregate_bool_exp_count {
  arguments: [tag_select_column!]
  distinct: Boolean
  filter: tag_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tag"
"""
type tag_aggregate_fields {
  avg: tag_avg_fields
  count(columns: [tag_select_column!], distinct: Boolean): Int!
  max: tag_max_fields
  min: tag_min_fields
  stddev: tag_stddev_fields
  stddev_pop: tag_stddev_pop_fields
  stddev_samp: tag_stddev_samp_fields
  sum: tag_sum_fields
  var_pop: tag_var_pop_fields
  var_samp: tag_var_samp_fields
  variance: tag_variance_fields
}

"""
order by aggregate values of table "tag"
"""
input tag_aggregate_order_by {
  avg: tag_avg_order_by
  count: order_by
  max: tag_max_order_by
  min: tag_min_order_by
  stddev: tag_stddev_order_by
  stddev_pop: tag_stddev_pop_order_by
  stddev_samp: tag_stddev_samp_order_by
  sum: tag_sum_order_by
  var_pop: tag_var_pop_order_by
  var_samp: tag_var_samp_order_by
  variance: tag_variance_order_by
}

"""
input type for inserting array relation for remote table "tag"
"""
input tag_arr_rel_insert_input {
  data: [tag_insert_input!]!

  """upsert condition"""
  on_conflict: tag_on_conflict
}

"""aggregate avg on columns"""
type tag_avg_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by avg() on columns of table "tag"
"""
input tag_avg_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
"""
input tag_bool_exp {
  _and: [tag_bool_exp!]
  _not: tag_bool_exp
  _or: [tag_bool_exp!]
  id: bigint_comparison_exp
  name: String_comparison_exp
  parent_tag: bigint_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  tags: tag_bool_exp
  tags_aggregate: tag_aggregate_bool_exp
}

"""
unique or primary key constraints on table "tag"
"""
enum tag_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tag_pkey
}

"""
input type for incrementing numeric columns in table "tag"
"""
input tag_inc_input {
  id: bigint
  parent_tag: bigint
  project_id: bigint
}

"""
input type for inserting data into table "tag"
"""
input tag_insert_input {
  id: bigint
  name: String
  parent_tag: bigint
  project: project_obj_rel_insert_input
  project_id: bigint
  tags: tag_arr_rel_insert_input
}

"""aggregate max on columns"""
type tag_max_fields {
  id: bigint
  name: String
  parent_tag: bigint
  project_id: bigint
}

"""
order by max() on columns of table "tag"
"""
input tag_max_order_by {
  id: order_by
  name: order_by
  parent_tag: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type tag_min_fields {
  id: bigint
  name: String
  parent_tag: bigint
  project_id: bigint
}

"""
order by min() on columns of table "tag"
"""
input tag_min_order_by {
  id: order_by
  name: order_by
  parent_tag: order_by
  project_id: order_by
}

"""
response of any mutation on the table "tag"
"""
type tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tag!]!
}

"""
on_conflict condition type for table "tag"
"""
input tag_on_conflict {
  constraint: tag_constraint!
  update_columns: [tag_update_column!]! = []
  where: tag_bool_exp
}

"""Ordering options when selecting data from "tag"."""
input tag_order_by {
  id: order_by
  name: order_by
  parent_tag: order_by
  project: project_order_by
  project_id: order_by
  tags_aggregate: tag_aggregate_order_by
}

"""primary key columns input for table: tag"""
input tag_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tag"
"""
enum tag_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  parent_tag

  """column name"""
  project_id
}

"""
input type for updating data in table "tag"
"""
input tag_set_input {
  id: bigint
  name: String
  parent_tag: bigint
  project_id: bigint
}

"""aggregate stddev on columns"""
type tag_stddev_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by stddev() on columns of table "tag"
"""
input tag_stddev_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type tag_stddev_pop_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by stddev_pop() on columns of table "tag"
"""
input tag_stddev_pop_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type tag_stddev_samp_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by stddev_samp() on columns of table "tag"
"""
input tag_stddev_samp_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""
Streaming cursor of the table "tag"
"""
input tag_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tag_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tag_stream_cursor_value_input {
  id: bigint
  name: String
  parent_tag: bigint
  project_id: bigint
}

"""aggregate sum on columns"""
type tag_sum_fields {
  id: bigint
  parent_tag: bigint
  project_id: bigint
}

"""
order by sum() on columns of table "tag"
"""
input tag_sum_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""
update columns of table "tag"
"""
enum tag_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  parent_tag

  """column name"""
  project_id
}

input tag_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tag_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tag_set_input

  """filter the rows which have to be updated"""
  where: tag_bool_exp!
}

"""aggregate var_pop on columns"""
type tag_var_pop_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by var_pop() on columns of table "tag"
"""
input tag_var_pop_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""aggregate var_samp on columns"""
type tag_var_samp_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by var_samp() on columns of table "tag"
"""
input tag_var_samp_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""aggregate variance on columns"""
type tag_variance_fields {
  id: Float
  parent_tag: Float
  project_id: Float
}

"""
order by variance() on columns of table "tag"
"""
input tag_variance_order_by {
  id: order_by
  parent_tag: order_by
  project_id: order_by
}

"""
columns and relationships of "user"
"""
type user {
  email: String!
  id: bigint!
  password: String!

  """An array relationship"""
  project_users(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): [project_user!]!

  """An aggregate relationship"""
  project_users_aggregate(
    """distinct select on columns"""
    distinct_on: [project_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_user_order_by!]

    """filter the rows returned"""
    where: project_user_bool_exp
  ): project_user_aggregate!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  email: String_comparison_exp
  id: bigint_comparison_exp
  password: String_comparison_exp
  project_users: project_user_bool_exp
  project_users_aggregate: project_user_aggregate_bool_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_index_1
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  id: bigint
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  email: String
  id: bigint
  password: String
  project_users: project_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  email: String
  id: bigint
  password: String
}

"""aggregate min on columns"""
type user_min_fields {
  email: String
  id: bigint
  password: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  email: order_by
  id: order_by
  password: order_by
  project_users_aggregate: project_user_aggregate_order_by
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  password
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  email: String
  id: bigint
  password: String
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  email: String
  id: bigint
  password: String
}

"""aggregate sum on columns"""
type user_sum_fields {
  id: bigint
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  password
}

input user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields {
  id: Float
}

